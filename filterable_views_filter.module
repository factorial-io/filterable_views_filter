<?php
/**
 * @file
 * Adds another form element to filter multiple exposed filter.
 */

/**
 * Implements hook_views_api().
 */
function filterable_views_filter_views_api() {
  return array(
    'api' => 3.0,
  );
}

/**
 * Add states extension for multiselect problems until #1149078 is fixed.
 */
function filterable_views_filter_page_build(&$page) {
  ctools_add_js('filterable_views_filter', 'filterable_views_filter');
}

/**
 * Implements hook_init().
 * @TODO
 *
 * Unset the filterable_views_filter_filter value for views.
 */
function filterable_views_filter_init() {
  if (isset($_GET['filterable_views_filter_filter'])) {
    unset($_GET['filterable_views_filter_filter']);
  }
}

/**
 * Ajax callback to fetch views-content for filterable_views_filter filter.
 * @return array of Ajax commands.
 */
function filterable_views_filter_ajax_callback($form, $form_state) {
  $commands = array();
  $params = array();
  if (isset($form_state['input']) AND is_array($form_state['input'])) {
    foreach ($form_state['input'] as $key => $value) {
      $params[] = "$key=" . urlencode($form_state['values'][$key]);
    }
  }
  $path = $form['#action'] . '?' . implode('&', $params) . ' #content';
  $options = array(
    $path,
    '#content',
  );
  $commands[] = ajax_command_invoke('#content', 'filterable_views_filterLoad', $options);
  return array('#type' => 'ajax', '#commands' => $commands);
}

/**
 * Recursively looks for the #ajax property for every form element.
 *
 * @param $elements
 *   The element array to look for #ajax property.
 *
 * @return
 *   Array of the elements names where #ajax was found.
 */
function views_exposed_form_ajax_lookup_recursive($elements) {
  $ajax_elements = array();
  foreach (element_children($elements) as $key) {
    if (!empty($elements[$key]['#name']) && !empty($elements[$key]['#ajax'])) {
      $ajax_elements[$elements[$key]['#name']] = $elements[$key]['#name'];
    }
    // Recursive call to look for #ajax in element's childrens.
    $ajax_elements += views_exposed_form_ajax_lookup_recursive($elements[$key]);
  }
  return $ajax_elements;
}

/**
 * Checks whether the exposed form will use ajax and passes required
 * form information removed in views_form_views_exposed_form_alter().
 */
 function filterable_views_filter_exposed_form_ajax_enable(&$form, &$form_state) {
  // In order for Ajax to work, we need the form build info. Here we
  // check if #ajax has been added to any form elements, and if so,
  // pass this info as settings via Javascript, which get attached to
  // the submitted form on Ajax form submissions.
  // #ajax property can be set not only for the first level of the form,
  // so we look for it in the whole form.
  $ajax_info = array();
  $ajax_elements = views_exposed_form_ajax_lookup_recursive($form);
  // Determine if form is being processed.
  $triggering_element_name = '';
  if (!empty($form_state['input']['_triggering_element_name'])) {
    $triggering_element_name = $form_state['input']['_triggering_element_name'];
  }
  // When we have multiple elements with #ajax set on exposed form
  // we need to pass only triggering element name to Javascript.
  // Otherwise #ajax will work only for the first element.
  if (!empty($triggering_element_name) && !empty($ajax_elements)) {
    // Check if element has #ajax property set.
    if (in_array($triggering_element_name, $ajax_elements)) {
      $ajax_elements = array(
        $triggering_element_name => $triggering_element_name,
      );
    }
    else {
      $ajax_elements = array();
    }
  }
  if (!empty($ajax_elements)) {
    $form_info = array(
      'form_id' => $form['#form_id'],
      'form_build_id' => $form['#build_id'],
    );
    // Anonymous users don't get a token.
    if (!empty($form['#token'])) {
      $form_info['form_token'] = $form['#token'];
    }
    foreach ($ajax_elements as $element_name) {
      $ajax_info[$element_name] = $form_info;
    }
    drupal_add_js(array('ViewsExposedFormInfo' => $ajax_info), 'setting');
    // Add the javascript behavior that will handle this data.
    $form['#attached']['js'][] = array(
      'weight' => 100,
      'data' => drupal_get_path('module', 'filterable_views_filter') . '/js/filterable_views_filter.js',
    );
  }
  return $form;
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 *
 * Ajaxify entity reference views filter form.
 */
function filterable_views_filter_form_views_form_alter(&$form, &$form_state, $form_id) {
  if (!isset($form['entityreference_view_widget'])) {
    return;
  }
  if (!empty($form['entityreference_view_widget'])) {
    foreach (element_children($form['entityreference_view_widget']) as $key) {

      $form['entityreference_view_widget'][$key]['#ajax'] = array(
        'callback' => 'filterable_views_filter_view_widget_ajax',
      );
    }
    $form['#validate'][] = 'filterable_views_filter_view_widget_validate';
  }
}

/**
 * Ajax callback to handle empty ids behaviour.
 */

/**
 * Ajax callback to transform selected entity IDs into table rows.
 */
function filterable_views_filter_view_widget_ajax($form, $form_state) {
  $commands = array();
  $form_state['values']['entityreference_view_widget'] = is_array($form_state['values']['entityreference_view_widget']) ? array_filter($form_state['values']['entityreference_view_widget']) : array($form_state['values']['entityreference_view_widget']);
  $out = entityreference_view_widget_ajax($form, $form_state);
  $commands = $out['#commands'];
  // Retrieve the settings array.
  $widget_settings = unserialize($form_state['values']['ervw_settings']);
  $selected_entity_ids = !empty($form_state['values']['selected_entity_ids']) ? explode(';', $form_state['values']['selected_entity_ids']) : array();
  $input_ids = array_merge($selected_entity_ids, $form_state['values']['entityreference_view_widget']);
  $entity_ids = !empty($widget_settings['allow_duplicates']) ? $input_ids : array_unique($input_ids);
  if (empty($entity_ids)) {
    $rows['#markup'] = t('No items have been added yet. Click "Add items" to launch the widget.');

    $commands[] = ajax_command_replace('#' . $widget_settings['table_id'] . ' > tbody', '<tbody><tr class="odd"><td colspan="3">' . render($rows) . '</td> </tr></tbody>');

  }

  return array(
    '#type' => 'ajax',
    '#commands' => $commands,
  );
}

/**
 * Custom ajax callback for entityreference_view_widget.
 */
function filterable_views_filter_view_widget_validate($form, &$form_state) {
  if (isset($form_state['values']['ervw_settings']) && !empty($form_state['values']['entityreference_view_widget'])) {
    if ($removed_id = filterable_views_filter_view_widget_find_removed($form, $form_state)) {
      $selected_entity_ids = !empty($form_state['values']['selected_entity_ids']) ? explode(';', $form_state['values']['selected_entity_ids']) : array();
      $selected_entity_ids = array_filter($selected_entity_ids);
      foreach ($selected_entity_ids as $key => $value) {
        if ($value == $removed_id) {
          unset($selected_entity_ids[$key]);
          break;
        }
      }
      $value = implode(';', $selected_entity_ids);
      $element = $form['selected_entity_ids'];
      form_set_value($element, $value, $form_state);
    }
  }
}

/**
 * Find out if an element have been removed from the form ( unchecked ).
 * If yes, return the id.
 */
function filterable_views_filter_view_widget_find_removed($form, $form_state) {
  if (isset($form_state['triggering_element']['#value']) AND empty($form_state['triggering_element']['#value'])) {
    return $form_state['triggering_element']['#return_value'];
  }
  return FALSE;
}
